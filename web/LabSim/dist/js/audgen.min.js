var audioLEFT = [
        { freq: 125, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 250, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 500, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 750, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 1e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 1500, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 2e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 3e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 4e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 6e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 8e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
    ],
    audioRIGHT = [
        { freq: 125, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 250, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 500, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 750, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 1e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 1500, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 2e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 3e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 4e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 6e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
        { freq: 8e3, air: NaN, bone: NaN, mask: NaN, maskbone: NaN },
    ],
    NRESP = -666;
const ON = 1,
    OFF = 0,
    LEFT = 0,
    RIGHT = 1;
var LEFTCOLOR = "#0000FF",
    RIGHTCOLOR = "#FF0000",
    NAVBGCOLOR = "#cbd0d3",
    NAVHICOLOR = "#48ba78";
const OCT_DELTA = X_DELTA,
    FC125 = 0,
    FC250 = OCT_DELTA,
    FC500 = 2 * OCT_DELTA,
    FC750 = 2.5 * OCT_DELTA,
    FC1000 = 3 * OCT_DELTA,
    FC1500 = 3.5 * OCT_DELTA,
    FC2000 = 4 * OCT_DELTA,
    FC3000 = 4.5 * OCT_DELTA,
    FC4000 = 5 * OCT_DELTA,
    FC6000 = 5.5 * OCT_DELTA,
    FC8000 = 6 * OCT_DELTA,
    fid = ["fs125", "fs250", "fs500", "fs750", "fs1000", "fs1500", "fs2000", "fs3000", "fs4000", "fs6000", "fs8000"],
    fxc = [0, FC250, FC500, FC750, FC1000, FC1500, FC2000, FC3000, FC4000, FC6000, FC8000],
    GUTTER_OFFSET = 17 + OCT_DELTA,
    GUTTER125 = 0 + GUTTER_OFFSET,
    GUTTER250 = FC250 + GUTTER_OFFSET,
    GUTTER500 = FC500 + GUTTER_OFFSET,
    GUTTER750 = FC750 + GUTTER_OFFSET,
    GUTTER1000 = FC1000 + GUTTER_OFFSET,
    GUTTER1500 = FC1500 + GUTTER_OFFSET,
    GUTTER2000 = FC2000 + GUTTER_OFFSET,
    GUTTER3000 = FC3000 + GUTTER_OFFSET,
    GUTTER4000 = FC4000 + GUTTER_OFFSET,
    GUTTER6000 = FC6000 + GUTTER_OFFSET,
    GUTTER8000 = FC8000 + GUTTER_OFFSET;
var currPos,
    stageWidth = 550,
    stageHeight = 550;
const RT_AIR = 0,
    RT_BONE = 1;
var trashIcon,
    stage = new Konva.Stage({ container: "audio-container", width: stageWidth, height: stageHeight }),
    activeLayer = new Konva.Layer({ name: "unassigned", x: X_ORIGIN, y: Y_ORIGIN }),
    activeLineLayer = new Konva.Layer({ x: X_ORIGIN, y: Y_ORIGIN }),
    activeLine = new Konva.Line(),
    rtAirLayer = new Konva.Layer({ name: "Right Air", x: X_ORIGIN, y: Y_ORIGIN }),
    rtBoneLayer = new Konva.Layer({ name: "Right Bone", x: X_ORIGIN, y: Y_ORIGIN }),
    rtMaskLayer = new Konva.Layer({ name: "Right Mask", x: X_ORIGIN, y: Y_ORIGIN }),
    rtMaskBoneLayer = new Konva.Layer({ name: "Right MBC", x: X_ORIGIN, y: Y_ORIGIN }),
    redLineLayer = new Konva.Layer({ x: X_ORIGIN, y: Y_ORIGIN, listening: !1 }),
    redLine = new Konva.Line({ points: [], stroke: "red", strokeWidth: 3, lineCap: "round", lineJoin: "round", listening: !1 }),
    rtAirNRLayer = new Konva.Layer({ name: "Right Air NR", x: X_ORIGIN, y: Y_ORIGIN }),
    rtBoneNRLayer = new Konva.Layer({ name: "Right Bone NR", x: X_ORIGIN, y: Y_ORIGIN }),
    rtMaskNRLayer = new Konva.Layer({ name: "Right Mask NR", x: X_ORIGIN, y: Y_ORIGIN }),
    rtMaskBoneNRLayer = new Konva.Layer({ name: "Right Mask Bone NR", x: X_ORIGIN, y: Y_ORIGIN }),
    ltAirLayer = new Konva.Layer({ name: "Left Air", x: X_ORIGIN, y: Y_ORIGIN }),
    ltBoneLayer = new Konva.Layer({ name: "Left Bone", x: X_ORIGIN, y: Y_ORIGIN }),
    ltMaskLayer = new Konva.Layer({ name: "Left Mask", x: X_ORIGIN, y: Y_ORIGIN }),
    ltMaskBoneLayer = new Konva.Layer({ name: "Left MBC", x: X_ORIGIN, y: Y_ORIGIN }),
    ltAirNRLayer = new Konva.Layer({ name: "Left AIR NR", x: X_ORIGIN, y: Y_ORIGIN }),
    ltBoneNRLayer = new Konva.Layer({ name: "Left Bone NR", x: X_ORIGIN, y: Y_ORIGIN }),
    ltMaskNRLayer = new Konva.Layer({ name: "Left Mask NR", x: X_ORIGIN, y: Y_ORIGIN }),
    ltMaskBoneNRLayer = new Konva.Layer({ name: "Left Mask Bone NR", x: X_ORIGIN, y: Y_ORIGIN }),
    blueLineLayer = new Konva.Layer({ x: X_ORIGIN, y: Y_ORIGIN, listening: !1 }),
    blueLine = new Konva.Line({ points: [], stroke: "blue", strokeWidth: 3, lineCap: "round", lineJoin: "round", listening: !1 }),
    blankLineLayer = new Konva.Layer({ x: X_ORIGIN, y: Y_ORIGIN, listening: !1 }),
    blankLine = new Konva.Line({ points: [], stroke: "blue", strokeWidth: 0, opacity: 0, lineCap: "round", lineJoin: "round", listening: !1 }),
    trashImg = new Image();
(trashImg.src = "assets/bin.png"),
    (trashImg.onload = function () {
        (trashIcon = new Konva.Image({ x: -50, y: 480, image: trashImg, width: 20, height: 20, listening: !0 })), ctrlLayer.add(trashIcon);
    });
var startTime,
    dragging,
    backLayer = new Konva.Layer({}),
    backRect = new Konva.Rect({ width: 699, height: 700, opacity: 1, fill: "white" }),
    menuNode = document.getElementById("context-menu");
function initApp() {
    stage.add(backLayer),
        backLayer.add(backRect),
        backLayer.draw(),
        drawAudGrid(gridLayer),
        stage.add(ltAirLayer, rtAirLayer),
        stage.add(ltBoneLayer, rtBoneLayer),
        stage.add(ltMaskLayer, rtMaskLayer),
        stage.add(ltMaskBoneLayer, rtMaskBoneLayer),
        stage.add(ltAirNRLayer, rtAirNRLayer),
        stage.add(ltBoneNRLayer, rtBoneNRLayer),
        stage.add(ltMaskNRLayer, rtMaskNRLayer),
        stage.add(ltMaskBoneNRLayer, rtMaskBoneNRLayer),
        stage.add(redLineLayer),
        stage.add(blueLineLayer),
        stage.add(activeLineLayer),
        stage.add(blankLineLayer),
        stage.add(ctrlLayer),
        setLayerListen(redLineLayer, !1),
        setLayerListen(blueLineLayer, !1),
        setLayerListen(activeLineLayer, !1),
        setLayerListen(ltAirLayer, !1),
        setLayerListen(rtAirLayer, !0),
        setLayerListen(ltBoneLayer, !1),
        setLayerListen(rtBoneLayer, !1),
        setLayerListen(ltMaskLayer, !1),
        setLayerListen(rtMaskLayer, !1),
        setLayerListen(ltMaskBoneLayer, !1),
        setLayerListen(rtMaskBoneLayer, !1),
        setLayerListen(ltAirNRLayer, !1),
        setLayerListen(rtAirNRLayer, !1),
        setLayerListen(ctrlLayer, !0),
        setContextMenuListener(),
        hideSeries(ltBoneLayer, blankLineLayer),
        hideSeries(rtBoneLayer, blankLineLayer),
        hideSeries(ltMaskLayer, blankLineLayer),
        hideSeries(rtMaskLayer, blankLineLayer),
        hideSeries(ltMaskBoneLayer, blankLineLayer),
        hideSeries(rtMaskBoneLayer, blankLineLayer),
        initSeries(RTaddAir, 10, rtAirLayer, redLineLayer, redLine),
        initSeries(LTaddAir, 30, ltAirLayer, blueLineLayer, blueLine),
        (activeLineLayer = redLineLayer),
        highlight((activeLayer = rtAirLayer), 1),
        stage.batchDraw(),
        addTrashListener(),
        drawAllLines();
}
function setContextMenuListener() {
    document.getElementById("createNR-butt").addEventListener("click", toggleNoResponse),
        document.getElementById("addNote-butt").addEventListener("click", annotateAudiogram),
        document.getElementById("closeContext-butt").addEventListener("click", hideContextMenu),
        document.addEventListener("keydown", function (e) {
            27 === e.keyCode && hideContextMenu(e);
        });
}
function addTrashListener() {
    trashIcon.on("click tap", function (e) {
        var a = trashIcon.getAttr("x");
        a = (Math.round(a / (X_DELTA / 2)) * X_DELTA) / 2;
        var n = findIndex(activeLayer, a);
        removeSymbol(activeLayer.children[n]), drawAllLines(), stage.draw();
    });
}
function setLayerListen(e, a) {
    e.setListening(a), e.hitGraphEnabled(a), e.drawHit();
}
function deactivateLayer(e, a) {
    setLayerListen(e, !1), setLayerListen(a, !1), highlight(e, 0);
}
function activateLayer(e, a, n, r, t) {
    deactivateLayer(activeLayer, activeLineLayer), navLowlight(), navHighlight(r), chkboxChange(!0, t), selectCheckBox(t), highlight(e, 1), (activeLineLayer = a), setLayerListen((activeLayer = e), !0);
}
function selectCheckBox(e) {
    document.getElementById(e).checked = !0;
}
function isInterOctave(e) {
    return 750 == e || 1500 == e || 3e3 == e || 6e3 == e;
}
function x2freq(e) {
    switch (e) {
        case 0:
            return 125;
        case FC250:
            return 250;
        case FC500:
            return 500;
        case FC750:
            return 750;
        case FC1000:
            return 1e3;
        case FC1500:
            return 1500;
        case FC2000:
            return 2e3;
        case FC3000:
            return 3e3;
        case FC4000:
            return 4e3;
        case FC6000:
            return 6e3;
        case FC8000:
            return 8e3;
        default:
            return -99;
    }
}
function freq2X(e) {
    switch (e) {
        case 125:
            return 0;
        case 250:
            return FC250;
        case 500:
            return FC500;
        case 750:
            return FC750;
        case 1e3:
            return FC1000;
        case 1500:
            return FC1500;
        case 2e3:
            return FC2000;
        case 3e3:
            return FC3000;
        case 4e3:
            return FC4000;
        case 6e3:
            return FC6000;
        case 8e3:
            return FC8000;
        default:
            return -99;
    }
}
function db2Y(e) {
    return (e / 10) * Y_DELTA + Y_DELTA;
}
function y2db(e) {
    return (10 * (e = convertY(e)) - Y_DELTA) / Y_DELTA + 6;
}
function comparePos(e, a) {
    return e.attrs.x - a.attrs.x;
}
function compareIndex(e, a) {
    return e.index - a.index;
}
function sortLayer(e) {
    e.children.sort(comparePos);
    for (var a = 0; a < e.children.length; a++) e.children[a].index = a;
}
function hideSeries(e, a) {
    e.hide(), e.draw(), a.hide(), a.draw();
}
function showSeries(e, a) {
    e.show(), e.draw(), a.show(), a.draw();
}
function highlight(e, a) {
    for (var n = 0; n < e.children.length; n++) {
        var r = e.children[n];
        r.shadowColor("green"), 1 == a && (r.shadowBlur(10), r.shadowOffsetY(8), r.shadowOffsetX(5)), 0 == a && (r.shadowBlur(0), r.shadowOffsetY(0), r.shadowOffsetX(0));
    }
    e.draw();
}
function navHighlight(e) {
    document.getElementById(e).style.background = NAVHICOLOR;
}
function navLowlight() {
    for (var e = document.getElementsByClassName("nav-row"), a = 0; a < e.length; a++) e[a].style.background = NAVBGCOLOR;
}
function convertX(e) {
    return e < GUTTER125
        ? 0
        : e < GUTTER250
        ? FC250
        : e < GUTTER500
        ? FC500
        : e < GUTTER750
        ? FC750
        : e < GUTTER1000
        ? FC1000
        : e < GUTTER1500
        ? FC1500
        : e < GUTTER2000
        ? FC2000
        : e < GUTTER3000
        ? FC3000
        : e < GUTTER4000
        ? FC4000
        : e < GUTTER6000
        ? FC6000
        : FC8000;
}
function snap2(e) {
    return { x: convertX(e.x), y: convertY(e.y) };
}
function getSymFuncNR(e) {
    return e == rtAirNRLayer
        ? RTaddAirNR
        : e == rtBoneNRLayer
        ? RTaddBoneNR
        : e == rtMaskNRLayer
        ? RTaddMaskNR
        : e == rtMaskBoneNRLayer
        ? RTaddMaskBoneNR
        : e == ltAirNRLayer
        ? LTaddAirNR
        : e == ltBoneNRLayer
        ? LTaddBoneNR
        : e == ltMaskNRLayer
        ? LTaddMaskNR
        : e == ltMaskBoneNRLayer
        ? LTaddMaskBoneNR
        : void 0;
}
function getNRLayer(e) {
    return e == rtAirLayer
        ? rtAirNRLayer
        : e == rtBoneLayer
        ? rtBoneNRLayer
        : e == rtMaskLayer
        ? rtMaskNRLayer
        : e == rtMaskBoneLayer
        ? rtMaskBoneNRLayer
        : e == ltAirLayer
        ? ltAirNRLayer
        : e == ltBoneLayer
        ? ltBoneNRLayer
        : e == ltMaskLayer
        ? ltMaskNRLayer
        : e == ltMaskBoneLayer
        ? ltMaskBoneNRLayer
        : void 0;
}
function hideContextMenu() {
    menuNode.style.display = "none";
}
function showCustomContext(e) {
    if (((currPos = stage.getPointerPosition()), e.preventDefault(), e.target !== stage)) {
        (currentShape = e.target), (menuNode.style.display = "initial");
        var a = stage.container().getBoundingClientRect(),
            n = a.top + currPos.y + 5;
        n > 450 && (n = 300), (menuNode.style.top = n + "px"), (menuNode.style.left = a.left + currPos.x - 5 + "px");
    }
}
function toggleNoResponse() {
    var e = currPos,
        a = getNRLayer(activeLayer);
    e = snap2(e);
    var n = getSymFuncNR(a);
    isEmptyGroup(e, a) ? n(a, e) : getGroupByPosX(a, e).destroy();
    a.draw();
}
function doubleClickTap() {
    var e = stage.getPointerPosition();
    (e = snap2(e)), addSymbol(parseSymfunc(activeLayer), e), drawAllLines();
}
stage.on("click", function (e) {
    var a = e.target.getAttr("x");
    trashIcon.setAttr("x", a - 7), ctrlLayer.draw();
}),
    (window.oncontextmenu = function (e) {
        showCustomContext(e);
    }),
    stage.on("dblclick", function (e) {
        doubleClickTap();
    }),
    stage.on("dbltap", function (e) {
        doubleClickTap();
    });
const holdTime = 1.5;
function addSymbol(e, a) {
    isEmpty(a, activeLayer) && (e(activeLayer, a), highlight(activeLayer, 1), updateAudioData(activeLayer));
}
function removeSymbol(e) {
    null != e && e.destroy(), updateAudioData(activeLayer);
}
function parseSymfunc(e) {
    return e == rtAirLayer
        ? RTaddAir
        : e == rtBoneLayer
        ? RTaddBone
        : e == rtMaskLayer
        ? RTaddMask
        : e == rtMaskBoneLayer
        ? RTaddMaskBone
        : e == ltAirLayer
        ? LTaddAir
        : e == ltBoneLayer
        ? LTaddBone
        : e == ltMaskLayer
        ? LTaddMask
        : e == ltMaskBoneLayer
        ? LTaddMaskBone
        : void 0;
}
function RTaddAir(e, a) {
    var n = genCircle(a, "red");
    makeDraggable(n), e.add(n), e.draw();
}
function largeHitFunc(e) {
    e.beginPath(), e.arc(0, 0, 20, 0, 2 * Math.PI, !0), e.closePath(), e.fillStrokeShape(this);
}
function genCircle(e, a) {
    return new Konva.Circle({
        x: e.x,
        y: e.y,
        radius: 10,
        stroke: a,
        strokeWidth: 3,
        hitFunc: function (e) {
            e.beginPath(), e.arc(0, 0, 20, 0, 2 * Math.PI, !0), e.closePath(), e.fillStrokeShape(this);
        },
    });
}
function genRedArrow(e) {
    return new Konva.Arrow({ points: [e.x - 6, e.y + 6, e.x - 16, e.y + 16], pointerLength: 5, pointerWidth: 5, stroke: "red", strokeWidth: 3 });
}
function genDragGroup(e, a) {
    e.position;
    var n = new Konva.Group({
        draggable: !0,
        dragBoundFunc: function (e) {
            return { x: this.getAbsolutePosition().x, y: convertY(e.y + Y_ORIGIN) - 2.5 };
        },
    });
    return n.add(e, a), n;
}
function makeDraggable(e) {
    e.position;
    e.draggable(!0),
        e.dragBoundFunc(function (e) {
            return { x: this.getAbsolutePosition().x, y: convertY(e.y + Y_ORIGIN) - 2.5 };
        });
}
function RTaddAirNR(e, a) {
    var n = genRedArrow(a),
        r = genDragGroup(genCircle(a, "red"), n);
    e.add(r), e.draw();
}
function genBlueX(e) {
    return new Konva.Shape({
        x: e.x,
        y: e.y,
        sceneFunc: function (e) {
            e.beginPath(), e.moveTo(-10, -10), e.lineTo(10, 10), e.moveTo(-10, 10), e.lineTo(10, -10), e.fillStrokeShape(this);
        },
        hitFunc: function (e) {
            e.beginPath(), e.arc(0, 0, 20, 0, 2 * Math.PI, !0), e.closePath(), e.fillStrokeShape(this);
        },
        stroke: "blue",
        strokeWidth: 3,
    });
}
function genBlueArrow(e) {
    return new Konva.Arrow({ points: [e.x + 5, e.y + 5, e.x + 15, e.y + 15], pointerLength: 5, pointerWidth: 5, stroke: "blue", strokeWidth: 3 });
}
function LTaddAir(e, a) {
    var n = genBlueX(a);
    makeDraggable(n), e.add(n), e.draw();
}
function LTaddAirNR(e, a) {
    var n = genBlueArrow(a),
        r = genDragGroup(genBlueX(a), n);
    e.add(r), e.draw();
}
function genBlueCaret(e) {
    return new Konva.Shape({
        x: e.x,
        y: e.y,
        sceneFunc: function (e) {
            e.beginPath(), e.moveTo(13, -10), e.lineTo(20, 0), e.lineTo(13, 10), e.fillStrokeShape(this);
        },
        stroke: "blue",
        strokeWidth: 3,
        hitStrokeWidth: 10,
    });
}
function LTaddBone(e, a) {
    var n = genBlueCaret(a);
    makeDraggable(n), e.add(n), e.draw();
}
function LTaddBoneNR(e, a) {
    var n = genBlueArrow({ x: a.x + 6, y: a.y + 6 }),
        r = genDragGroup(genBlueCaret(a), n);
    e.add(r), e.draw();
}
function genBlueSquare(e) {
    return new Konva.Rect({ x: e.x, y: e.y, offsetX: 10, offsetY: 10, width: 20, height: 20, stroke: "blue", strokeWidth: 3, hitStrokeWidth: 10 });
}
function LTaddMask(e, a) {
    var n = genBlueSquare(a);
    makeDraggable(n), e.add(n), e.draw();
}
function LTaddMaskNR(e, a) {
    var n = genBlueArrow({ x: a.x + 5, y: a.y + 5 }),
        r = genDragGroup(genBlueSquare(a), n);
    e.add(r), e.draw();
}
function genRedCaret(e) {
    return new Konva.Shape({
        x: e.x,
        y: e.y,
        sceneFunc: function (e) {
            e.beginPath(), e.moveTo(-13, -10), e.lineTo(-20, 0), e.lineTo(-13, 10), e.fillStrokeShape(this);
        },
        stroke: "red",
        strokeWidth: 3,
        hitStrokeWidth: 10,
    });
}
function RTaddBone(e, a) {
    var n = genRedCaret(a);
    makeDraggable(n), e.add(n), e.draw();
}
function RTaddBoneNR(e, a) {
    var n = genRedArrow({ x: a.x - 5, y: a.y + 5 }),
        r = genDragGroup(genRedCaret(a), n);
    e.add(r), e.draw();
}
function genRedTriangle(e) {
    return new Konva.Shape({
        x: e.x,
        y: e.y,
        sceneFunc: function (e) {
            e.beginPath(), e.moveTo(0, -10), e.lineTo(10, 10), e.lineTo(-10, 10), e.lineTo(0, -10), e.fillStrokeShape(this);
        },
        stroke: "red",
        strokeWidth: 3,
        hitStrokeWidth: 10,
    });
}
function RTaddMask(e, a) {
    var n = genRedTriangle(a);
    makeDraggable(n), e.add(n), e.draw();
}
function RTaddMaskNR(e, a) {
    var n = genRedArrow({ x: a.x - 5, y: a.y + 5 }),
        r = genDragGroup(genRedTriangle(a), n);
    e.add(r), e.draw();
}
function genRedBracket(e) {
    return new Konva.Shape({
        x: e.x,
        y: e.y,
        sceneFunc: function (e) {
            e.beginPath(), e.moveTo(-12, -10), e.lineTo(-17, -10), e.lineTo(-17, 10), e.lineTo(-12, 10), e.fillStrokeShape(this);
        },
        stroke: "red",
        strokeWidth: 3,
        hitStrokeWidth: 10,
    });
}
function RTaddMaskBoneNR(e, a) {
    var n = genRedArrow({ x: a.x - 12, y: a.y + 5 }),
        r = genDragGroup(genRedBracket(a), n);
    e.add(r), e.draw();
}
function RTaddMaskBone(e, a) {
    var n = genRedBracket(a);
    makeDraggable(n), e.add(n), e.draw();
}
function genBlueBracket(e) {
    return new Konva.Shape({
        x: e.x,
        y: e.y,
        sceneFunc: function (e) {
            e.beginPath(), e.moveTo(12, 10), e.lineTo(17, 10), e.lineTo(17, -10), e.lineTo(12, -10), e.fillStrokeShape(this);
        },
        stroke: "blue",
        strokeWidth: 3,
        hitStrokeWidth: 10,
    });
}
function genLineSegment(e, a, n, r, t) {
    return new Konva.Line({ points: [e, a, n, r], stroke: t, strokeWidth: 3 });
}
function LTaddMaskBone(e, a) {
    var n = genBlueBracket(a);
    makeDraggable(n), e.add(n), e.draw();
}
function LTaddMaskBoneNR(e, a) {
    var n = genBlueArrow({ x: a.x + 12, y: a.y + 5 }),
        r = genDragGroup(genBlueBracket(a), n);
    e.add(r), e.draw();
}
function isEmpty(e, a) {
    for (var n = a.children.length, r = 0; r < n; r++) if (a.children[r].getAttr("x") == e.x) return !1;
    return !0;
}
function isEmptyGroup(e, a) {
    for (var n = a.children.length, r = 0; r < n; r++) if (a.children[r].children[0].getAttr("x") == e.x) return !1;
    return !0;
}
function initSeries(e, a, n, r, t, i = 125, o = 8e3) {
    for (var d = { x: 0, y: 0 }, s = i; s <= o; s *= 2) (d.x = freq2X(s)), (d.y = db2Y(a)), e(n, d);
}
function resetSeries(e, a) {
    for (var n = e.children.length, r = 0; r < n; r++) e.children[0].destroy();
    for (r = 0; r < a.children.length; r++) a.children[0].destroy();
    drawAllLines(), e.draw();
}
function getAudioSide(e) {
    return e.includes("Right") ? audioRIGHT : e.includes("Left") ? audioLEFT : void window.alert("ERR: @getAudioSide could not find data");
}
function findIndex(e, a) {
    for (var n = 0; n < e.children.length; n++) if (e.children[n].getAttr("x") == a) return n;
    return -1;
}
function getAudioType(e) {
    return e.includes("Air") ? "air" : e.includes("Bone") ? "bone" : e.includes("Mask") ? "mask" : e.includes("MBC") ? "maskbone" : void 0;
}
function clearAudioData(e, a) {
    if ("air" == a) for (var n = 0; n < e.length; n++) e[n].air = NaN;
    if ("mask" == a) for (n = 0; n < e.length; n++) e[n].mask = NaN;
}
function updateAudioData(e) {
    var a,
        n,
        r,
        t,
        i = e.getAttr("name"),
        o = getAudioSide(i),
        d = getAudioType(i),
        s = 0,
        c = 0;
    for (clearAudioData(o, d); s < e.children.length; ) for (t = e.children[s].getAttr("y"), r = e.children[s].getAttr("x"), n = y2db(t), a = x2freq(r), c = 0; c < o.length; c++) o[c].freq == a && (updateAudioEntry(o, d, c, n), s++);
}
function updateAudioEntry(e, a, n, r) {
    "air" == a && (e[n].air = r), "mask" == a && (e[n].mask = r);
}
function drawAllLines() {
    updateAudioData(ltAirLayer),
        updateAudioData(ltMaskLayer),
        drawAudiogramLines(ltAirLayer, blueLineLayer, audioLEFT, "blue"),
        updateAudioData(rtAirLayer),
        updateAudioData(rtMaskLayer),
        drawAudiogramLines(rtAirLayer, redLineLayer, audioRIGHT, "red");
}
function drawAudiogramLines(e, a, n, r) {
    var t = 0, i = 0, o = 0, d = 0, s = !1, c = !1, u = 0, l = 1,
        L = n.length;
    for (a.destroyChildren(), updateAudioData(e); l < L; ) {
        if (
            ((s = c = !1),
            isNaN(n[u].air) || ((t = n[u].freq), (o = n[u].air), (s = !0)),
            isNaN(n[u].mask) || ((t = n[u].freq), (o = n[u].mask), (s = !0)),
            isNaN(n[l].air) || ((i = n[l].freq), (d = n[l].air), (c = !0)),
            isNaN(n[l].mask) || ((i = n[l].freq), (d = n[l].mask), (c = !0)),
            1 != c && isInterOctave(n[l].freq) && (l++, isNaN(n[l].air) || ((i = n[l].freq), (d = n[l].air), (c = !0)), isNaN(n[l].mask) || ((i = n[l].freq), (d = n[l].mask), (c = !0)), l--),
            s && c)
        ) {
            (x1 = freq2X(t)), (y1 = db2Y(o)), (x2 = freq2X(i)), (y2 = db2Y(d));
            var y = genLineSegment(x1, y1, x2, y2, r);
            a.add(y);
        }
        u++, l++;
    }
    a.draw();
}
function sortLine(e) {
    for (var a = e.points().length, n = e.getAttr("points"), r = 0; r < a - 2; r += 2) for (var t = 0; t < a - 2; t += 2) n[t] > n[t + 2] && swapLineCoord(t, n);
}
function swapLineCoord(e, a) {
    var n = a[e + 2],
        r = a[e + 3];
    (a[e + 2] = a[e]), (a[e + 3] = a[e + 1]), (a[e] = n), (a[e + 1] = r);
}
function saveAudiogram() {
    highlight(activeLayer, 0), ctrlLayer.hide(), ctrlLayer.draw();
    var e = stage.toDataURL(),
        a = document.createElement("a");
    (a.download = "audiogram"),
        (a.href = e),
        (a.dataset.downloadurl = ["image/png", a.download, a.href].join(":")),
        document.body.appendChild(a),
        a.click(),
        document.body.removeChild(a),
        highlight(activeLayer, 1),
        ctrlLayer.show(),
        ctrlLayer.draw();
}
function toggleSeries(e, a, n) {
    e ? showSeries(a, n) : hideSeries(a, n);
}
function chkboxChange(e, a) {
    "cb-la" == a && toggleSeries(e, ltAirLayer, blueLineLayer),
        "cb-ra" == a && toggleSeries(e, rtAirLayer, redLineLayer),
        "cb-lb" == a && toggleSeries(e, ltBoneLayer, blankLineLayer),
        "cb-rb" == a && toggleSeries(e, rtBoneLayer, blankLineLayer),
        "cb-lma" == a && toggleSeries(e, ltMaskLayer, blankLineLayer),
        "cb-rma" == a && toggleSeries(e, rtMaskLayer, blankLineLayer),
        "cb-rmb" == a && toggleSeries(e, rtMaskBoneLayer, blankLineLayer),
        "cb-lmb" == a && toggleSeries(e, ltMaskBoneLayer, blankLineLayer);
}
stage.on("mousedown touchstart", function (e) {
    return (startTime = +new Date()), !1;
}),
    stage.on("mouseup touchend", function (e) {
        if ((+new Date() - startTime) / 1e3 > 1.5) {
            let e = new Event("oncontextmenu");
            dragging || showCustomContext(e);
        }
    }),
    stage.on("dragstart", function (e) {
        var a = e.target.getAttr("x");
        trashIcon.setAttr("x", a - 7), (dragging = !0), ctrlLayer.draw();
    }),
    stage.on("dragend", function (e) {
        var a = e.target;
        a.getAttr("y") >= 13.5 * Y_DELTA && removeSymbol(a), (dragging = !1), drawAllLines(), stage.batchDraw();
    });
var NumEdit = document.getElementById("dBPopup"),
    modalBtn = document.getElementById("dBOpen"),
    span = document.getElementsByClassName("close")[0];
function hasSymbol(e, a) {
    return !isEmpty({ x: e, y: 0 }, a);
}
function getDB(e) {
    for (var a = activeLayer.children.length, n = 0; n < a; n++) if (activeLayer.children[n].getAttr("x") == e) return y2db(activeLayer.children[n].getAttr("y"));
}
function setDB(e) {
    for (var a = activeLayer.children.length, n = 0; n < a; n++) if (activeLayer.children[n].getAttr("x") == e) return y2db(activeLayer.children[n].getAttr("y"));
}
function showInput(e, a) {
    document.getElementById(e).value = getDB(a);
}
function enableNumInputs(e) {
    for (var a = 0; a < fid.length; a++) showInput(fid[a], fxc[a]);
}
function idString2X(e) {
    return "fs125" == e
        ? 0
        : "fs250" == e
        ? FC250
        : "fs500" == e
        ? FC500
        : "fs750" == e
        ? FC750
        : "fs1000" == e
        ? FC1000
        : "fs1500" == e
        ? FC1500
        : "fs2000" == e
        ? FC2000
        : "fs3000" == e
        ? FC3000
        : "fs4000" == e
        ? FC4000
        : "fs6000" == e
        ? FC6000
        : "fs8000" == e
        ? FC8000
        : 2;
}
function getShapeIndexById(e, a) {
    for (var n = a.children.length, r = 0; r < n; r++) if (a.children[r].getAttr("x") == idString2X(e)) return r;
}
function getShapeByPosX(e, a) {
    for (var n = e.children.length, r = 0; r < n; r++) if (e.children[r].getAttr("x") == a.x) return e.children[r];
    return null;
}
function getGroupByPosX(e, a) {
    for (var n = e.children.length, r = 0; r < n; r++) if (e.children[r].children[0].getAttr("x") == a.x) return e.children[r];
    return null;
}
function editdB(e, a) {
    db2Y(a);
    var n = getShapeIndexById(e, activeLayer);
    moveToDB(activeLayer.children[n], a), drawAllLines();
}
function moveToDB(e, a) {
    var n = db2Y(a),
        r = e.position();
    (r.y = n), e.position(r), activeLayer.draw();
}
function addNote(e, a) {
    var n = new Konva.Text({ text: " ", x: a.x - X_ORIGIN, y: a.y - Y_ORIGIN, fontSize: 20, draggable: !0 });
    return e.add(n), n;
}
function annotateAudiogram() {
    var e = gridLayer;
    editNote(addNote(e, currPos), e), e.draw();
}
function editNote(e, a) {
    var n = currPos,
        r = stage.container().getBoundingClientRect(),
        t = r.left + n.x,
        i = r.top + n.y,
        o = document.createElement("textarea");
    document.body.appendChild(o),
        (o.value = e.text()),
        (o.style.position = "absolute"),
        (o.style.top = i + "px"),
        (o.style.left = t + "px"),
        (o.style.width = e.width()),
        o.focus(),
        o.addEventListener("keydown", function (n) {
            13 === n.keyCode && (e.text(o.value), a.draw(), document.body.removeChild(o));
        });
}
function trace(e) {}
(modalBtn.onclick = function () {
    (document.getElementById("dBEditTitle").innerHTML = "Editing : " + activeLayer.attrs.name), enableNumInputs(activeLayer), (NumEdit.style.display = "block");
}),
    (span.onclick = function () {
        NumEdit.style.display = "none";
    }),
    (window.onclick = function (e) {
        e.target == NumEdit && (NumEdit.style.display = "none");
    });
